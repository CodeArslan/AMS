
@{
    ViewBag.Title = "AttendanceForCardHolders";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="main-content">
    <div class="breadcrumb">
        <ul>
            <li><a href="#">Attendance</a></li>
            <li>Add Attendance For Card Holders</li>
        </ul>
    </div>
    <div class="separator-breadcrumb border-top"></div>
</div>
<div class="col-md-12 mb-3">
    <div class="card text-start">
        <div class="alert alert-dismissible fade show alert-card alert-success" role="alert" id="successAlert" style="display:none">
            <strong class="text-capitalize">Success!</strong> <span id="successMessage"></span>
            <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div class="alert alert-dismissible fade show alert-card alert-danger" role="alert" id="errorAlert" style="display:none">
            <strong class="text-capitalize">Error!</strong> <span id="errorMessage"></span>
            <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div class="card-header">
            <h3 class="text-mute">Add Attendance</h3>
        </div>
        <div class="card-body">
            <h3>Search Employee</h3>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon-to">Employee Number:</span>
                            <span class="input-group-text">Cactus-</span>
                            <input type="text" class="form-control" id="cardCode" aria-label="Employee Number" aria-describedby="basic-addon-to">
                        </div>
                    </div>
                </div>

            </div>
            <div class="table-responsive">
                <table class="table table-hover table-bordered table-striped" id="cardAttendance">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">Employee Name</th>
                            <th scope="col">Date</th>
                            <th scope="col">Time In</th>
                            <th scope="col">Time Out</th>
                            <th scope="col">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>



        </div>
        <div class="card-footer">
            <div style="text-align:center">
                <button class="btn btn-outline-primary" style="width:25%" href="#" id="upload" disabled>Upload</button>
            </div>
        </div>
    </div>
</div>
<div class="col-md-12 mb-3">
    <div class="card text-start">
        <div class="alert alert-dismissible fade show alert-card alert-success" role="alert" id="successAlert" style="display:none">
            <strong class="text-capitalize">Success!</strong> <span id="successMessage"></span>
            <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div class="alert alert-dismissible fade show alert-card alert-danger" role="alert" id="errorAlert" style="display:none">
            <strong class="text-capitalize">Error!</strong> <span id="errorMessage"></span>
            <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div class="card-header">
            <h3 class="text-mute">Employee Attendance<i class="fas fa-sync-alt float-end text-20 mr-5" id="reloadIcon" title="Press to Reload Employee Attendance Table"></i></h3>
        </div>
        <div class="card-body">
            <h3>Search By Date</h3>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <input class="form-control" type="date" id="filterDate">
                    </div>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-bordered table-striped" id="employeeAttendance">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">Employee Name</th>
                            <th scope="col">Date</th>
                            <th scope="col">Time In</th>
                            <th scope="col">Time Out</th>
                            <th scope="col">Total Worked Time</th>
                            <th scope="col">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>

        </div>
        <div class="card-footer"></div>
    </div>
</div>



@section scripts
{
    <script>
        $(document).ready(function () {
            $("#reloadIcon").tooltip({
                placement: "left", // Set the tooltip placement to left
                show: {
                    effect: "slideDown",
                    delay: 250
                }
            });
            $("#reloadIcon").click(function () {
                $(this).toggleClass('fa-spin');
                fetchEmployeeAttendance();
            });
            var today = new Date().toISOString().slice(0, 10);

            $("#filterDate").val(today);
            fetchEmployeeAttendance();
            $("#filterDate").on("change", function () {
                fetchEmployeeAttendance();
            });
            $('#cardCode').on('blur', function () {
                fetchEmployeeByCard();
            });
            function fetchEmployeeAttendance() {
                var selectedDate = $("#filterDate").val();
                $('#employeeAttendance').DataTable({
                    "destroy": true,
                    "ajax": {
                        "url": '/Attendance/GetEmployeeAttendance',
                        "type": "GET",
                        "datatype": "json",
                        "dataSrc": "",
                        "data": {
                            date: selectedDate // Pass the selected date as a parameter
                        },
                        "contentType": 'application/json; charset=utf-8',
                        "beforeSend": function (xhr) {
                            hideSpinner();
                        }
                    },
                    "columns": [
                        {
                            "data": null, "render": function (data, type, row) {
                                return row.Employee.FirstName + ' ' + row.Employee.LastName;
                            }
                        },
                        {
                            "data": "date",
                            "render": function (data, type, row) {
                                if (data) {
                                    // Parse the date using Moment.js
                                    var parsedDate = moment(parseInt(data.substr(6)));
                                    // Format the date as "20 Mar, 2024"
                                    return parsedDate.format("DD MMM, YYYY");
                                } else {
                                    return ""; // Return empty string if data is null or empty
                                }
                            }
                        },
                        {
                            "data": "timeIn",
                            "render": function (data) {
                                if (data) {
                                    return moment(data, 'HH:mm:ss').format('h:mm A');
                                } else {
                                    return "--:--";

                                }
                            }
                        },
                        {
                            "data": "timeOut",
                            "render": function (data) {
                                if (data === '00:00:05') {
                                    return "--:--";
                                } else if (data) {
                                    return moment(data, 'HH:mm:ss').format('h:mm A');
                                } else {
                                    return "--:--";
                                }
                            }
                        },


                        {
                            "data": "totalWorkedTime",
                        },
                        {
                            "data": "status",
                            "render": function (data, type, row) {
                                if (data === "Present") {
                                    return '<td style="background-color: green !important;"><div>' + data + '</div></td>';
                                } else {
                                    return '<td style="background-color: red !important;"><div>Absent</div></td>';
                                }
                            }
                        }

                    ],
                    "initComplete": function (settings, json) {
                        $("#reloadIcon").removeClass('fa-spin');
                        $('#employeeAttendance tbody tr').each(function () {
                            var statusCell = $(this).find('td:eq(5)');
                            var status = statusCell.text();
                            if (status === "Present") {
                                statusCell.css({
                                    'background-color': 'forestgreen',
                                    'color': 'white',
                                    'text-align': 'center'
                                });
                            } else {
                                statusCell.css({
                                    'background-color': 'red',
                                    'text-align': 'center'
                                });
                            }
                        });
                    },
                    pagingType: 'full_numbers',
                    language: {
                        paginate: {
                            first: 'First',
                            previous: '&lsaquo;',
                            next: '&rsaquo;',
                            last: 'Last'
                        },
                        searchPlaceholder: 'Min 3 Characters'
                    },
                    autoWidth: false, // Disable auto width calculation
                    columnDefs: [
                        { width: '100px', targets: '_all' } // Set a fixed width for all columns, adjust as needed
                    ],
                    drawCallback: function () {
                        // Override DataTables styles with Bootstrap styles after each draw
                        $('.dataTables_paginate .paginate_button').removeClass('paginate_button').addClass('page-item');
                        $('.dataTables_paginate .paginate_button a').removeClass('paginate_button').addClass('page-link');
                        $('.dataTables_paginate .paginate_button.current').removeClass('paginate_button').addClass('active');
                        $('.dataTables_paginate .paginate_button.disabled').removeClass('paginate_button').addClass('disabled');
                    }
                });

            }

            //function fetchEmployeeByCard() {
            //    var employeeNumber = $("#cardCode").val();
            //    employeeNumber = "Cactus-" + employeeNumber;
            //    var table=$('#cardAttendance').DataTable({
            //        "destroy": true,
            //        "ajax": {
            //            "url": '/Attendance/GetEmployeeByCard',
            //            "type": "GET",
            //            "datatype": "json",
            //            "dataSrc": function (data) {
            //                // Check if data is empty
            //                if (data.length === 0) {
            //                    // Show error message
            //                    $('#errorAlert').show();
            //                    $('#errorMessage').text("Employee not found.");
            //                    // Return empty array to DataTables
            //                    return [];
            //                } else {
            //                    // Return data to DataTables
            //                    return data;
            //                }
            //            },
            //            "data": {
            //                employeeNumber: employeeNumber
            //            },
            //            "contentType": 'application/json; charset=utf-8',
            //            "beforeSend": function (xhr) {
            //                hideSpinner();
            //            }
            //        },
            //        "columns": [
            //            {
            //                "data": null,
            //                "render": function (data, type, full, meta) {
            //                    return full.FirstName + ' ' + full.LastName;
            //                }
            //            },
            //            {
            //                "data": null,
            //                "render": function (data, type, full, meta) {
            //                    return '<input type="date" id="date' + full.Id + '" class="form-control">';
            //                }
            //            },

            //            {
            //                "data": "TimeIn",
            //                "render": function (data, type, full, meta) {
            //                    if (data) {
            //                        return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="startTime_' + full.Id + '" value="' + data.slice(0, 5) + '" data-id="' + full.Id + '" /></div></td>';
            //                    } else {
            //                        return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="startTime_' + full.Id + '" value="" data-id="' + full.Id + '" /></div></td>';
            //                    }
            //                }
            //            },

            //            {
            //                "data": "TimeOut",
            //                "render": function (data, type, full, meta) {
            //                    if (data) {
            //                        return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="endTime_' + full.Id + '" value="' + data.slice(0, 5) + '" /></div></td>';
            //                    } else {
            //                        return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="endTime_' + full.Id + '" value="" /></div></td>';
            //                    }
            //                }
            //            },




            //            {
            //                "data": null,
            //                "render": function (data, type, full, meta) {
            //                    return '<td>' +
            //                        '<div class="form-check form-check-inline">' +
            //                        '<input class="form-check-input status-radio" type="radio" name="status_' + full.Id + '" id="status-present_' + full.Id + '" value="present" checked>' +
            //                        '<label class="form-check-label" for="status-present_' + full.Id + '">Present</label>' +
            //                        '</div>' +
            //                        '<div class="form-check form-check-inline">' +
            //                        '<input class="form-check-input status-radio" type="radio" name="status_' + full.Id + '" id="status-absent_' + full.Id + '" value="absent">' +
            //                        '<label class="form-check-label" for="status-absent_' + full.Id + '">Absent</label>' +
            //                        '</div>' +
            //                        '</td>';
            //                }
            //            }


            //        ],

            //        pagingType: 'full_numbers',
            //        language: {
            //            paginate: {
            //                first: 'First',
            //                previous: '&lsaquo;',
            //                next: '&rsaquo;',
            //                last: 'Last'
            //            },
            //            searchPlaceholder: 'Min 3 Characters'
            //        },
            //        autoWidth: false, // Disable auto width calculation
            //        columnDefs: [
            //            { width: '100px', targets: '_all' } // Set a fixed width for all columns, adjust as needed
            //        ],
            //        drawCallback: function () {
            //            // Override DataTables styles with Bootstrap styles after each draw
            //            $('.dataTables_paginate .paginate_button').removeClass('paginate_button').addClass('page-item');
            //            $('.dataTables_paginate .paginate_button a').removeClass('paginate_button').addClass('page-link');
            //            $('.dataTables_paginate .paginate_button.current').removeClass('paginate_button').addClass('active');
            //            $('.dataTables_paginate .paginate_button.disabled').removeClass('paginate_button').addClass('disabled');
            //        },
            //        "initComplete": function (settings, json) {
            //            // Check if there's at least one row
            //            if (table.rows().count() > 0) {
            //                // Enable the button by removing the disabled attribute
            //                $('#upload').removeAttr('disabled');
            //            }
            //            else {
            //                // Disable the button by adding the disabled attribute
            //                $('#upload').attr('disabled', 'disabled');
            //            }
            //        }
            //    });

            //}
            function fetchEmployeeByCard() {
                var employeeNumber = $("#cardCode").val();
                employeeNumber = "Cactus-" + employeeNumber;

                $.ajax({
                    url: '/Attendance/GetEmployeeByCard',
                    type: 'GET',
                    data: { employeeNumber: employeeNumber },
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        debugger;
                        // Hide any previous error alerts
                        $('#errorAlert').hide();

                        // Check if data is empty
                        if (data.error) {
                            // Show error message
                            $('#errorAlert').show();
                            $('#errorMessage').text(data.error);
                            setInterval(hideAlerts, 2000);
                            initializeDataTable(data);

                        } else {
                            // Initialize DataTables
                            initializeDataTable(data);
                        }
                    },
                    error: function (xhr, status, error) {
                        // Populate error message and show error alert
                        $('#errorMessage').text(xhr.responseJSON.error);
                        $('#errorAlert').show();
                    }
                });
            }

            function initializeDataTable(data) {
                var table = $('#cardAttendance').DataTable({
                    "destroy": true,
                    "data": data,
                    "columns": [
                        {
                            "data": null,
                            "render": function (data, type, full, meta) {
                                return full.FirstName + ' ' + full.LastName;
                            }
                        },
                        {
                            "data": null,
                            "render": function (data, type, full, meta) {
                                return '<input type="date" id="date' + full.Id + '" class="form-control">';
                            }
                        },

                        {
                            "data": "TimeIn",
                            "render": function (data, type, full, meta) {
                                if (data) {
                                    return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="startTime_' + full.Id + '" value="' + data.slice(0, 5) + '" data-id="' + full.Id + '" /></div></td>';
                                } else {
                                    return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="startTime_' + full.Id + '" value="" data-id="' + full.Id + '" /></div></td>';
                                }
                            }
                        },

                        {
                            "data": "TimeOut",
                            "render": function (data, type, full, meta) {
                                if (data) {
                                    return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="endTime_' + full.Id + '" value="' + data.slice(0, 5) + '" /></div></td>';
                                } else {
                                    return '<td><div class="input-group timepicker"><input type="time" class="form-control" id="endTime_' + full.Id + '" value="" /></div></td>';
                                }
                            }
                        },




                        {
                            "data": null,
                            "render": function (data, type, full, meta) {
                                return '<td>' +
                                    '<div class="form-check form-check-inline">' +
                                    '<input class="form-check-input status-radio" type="radio" name="status_' + full.Id + '" id="status-present_' + full.Id + '" value="present" checked>' +
                                    '<label class="form-check-label" for="status-present_' + full.Id + '">Present</label>' +
                                    '</div>' +
                                    '<div class="form-check form-check-inline">' +
                                    '<input class="form-check-input status-radio" type="radio" name="status_' + full.Id + '" id="status-absent_' + full.Id + '" value="absent">' +
                                    '<label class="form-check-label" for="status-absent_' + full.Id + '">Absent</label>' +
                                    '</div>' +
                                    '</td>';
                            }
                        }


                    ],
                    pagingType: 'full_numbers',
                    language: {
                        paginate: {
                            first: 'First',
                            previous: '&lsaquo;',
                            next: '&rsaquo;',
                            last: 'Last'
                        },
                        searchPlaceholder: 'Min 3 Characters'
                    },
                    autoWidth: false, // Disable auto width calculation
                    columnDefs: [
                        { width: '100px', targets: '_all' } // Set a fixed width for all columns, adjust as needed
                    ],
                    drawCallback: function () {
                        // Override DataTables styles with Bootstrap styles after each draw
                        $('.dataTables_paginate .paginate_button').removeClass('paginate_button').addClass('page-item');
                        $('.dataTables_paginate .paginate_button a').removeClass('paginate_button').addClass('page-link');
                        $('.dataTables_paginate .paginate_button.current').removeClass('paginate_button').addClass('active');
                        $('.dataTables_paginate .paginate_button.disabled').removeClass('paginate_button').addClass('disabled');
                    },
                    // Other options...
                });

                // Check if there's at least one row
                if (table.rows().count() > 0) {
                    // Enable the button by removing the disabled attribute
                    $('#upload').removeAttr('disabled');
                } else {
                    // Disable the button by adding the disabled attribute
                    $('#upload').attr('disabled', 'disabled');
                }
            }

            $('#upload').on('click', function () {
                var dataToUpload = []; // Array to store data of rows marked as 'Present'
                var errorOccurred = false; // Flag to track if any error occurred

                // Iterate over each row in the DataTable
                $('#cardAttendance').find('tbody tr').each(function () {
                    var rowData = $(this).find('td'); // Get the columns of the current row
                    var status = $(rowData[4]).find('input[type=radio]:checked').val(); // Get the value of the checked radio button (status)
                    var date = $(rowData[1]).find('input[type=date]').val(); // Get the value of the date input

                    // Check if date is empty
                    if (!date) {
                        errorOccurred = true;
                        $('#errorMessage').text('Please select a date for all employees.');
                        $('#errorAlert').fadeIn();
                        setTimeout(hideAlerts, 2000);

                        return false; // Exit the loop if error occurred
                    }

                    // If status is 'Present', extract ID, TimeIn, and TimeOut values
                    if (status === 'present') {
                        var id = $(rowData[2]).find('input[type=time]').data('id');
                        var timeIn = $(rowData[2]).find('input[type=time]').val(); // Get TimeIn from the second column input
                        var timeOut = $(rowData[3]).find('input[type=time]').val(); // Get TimeOut from the third column input

                        // Check if timeIn or timeOut is empty
                        if (!timeIn || !timeOut) {
                            errorOccurred = true;
                            $('#errorMessage').text('Please enter both Time In and Time Out for all present employees.');
                            $('#errorAlert').fadeIn();
                            setTimeout(hideAlerts, 2000);

                            return false; // Exit the loop if error occurred
                        }

                        // Check if timeIn is earlier than timeOut
                        if (timeIn >= timeOut) {
                            errorOccurred = true;
                            $('#errorMessage').text('Time In should be earlier than Time Out.');
                            $('#errorAlert').fadeIn();
                            setTimeout(hideAlerts, 2000);

                            return false; // Exit the loop if error occurred
                        }

                        // Add the data to the array
                        dataToUpload.push({ employeeId: id, timeIn: timeIn, timeOut: timeOut, date: date });
                    }
                });

                // If error occurred, return
                if (errorOccurred) {
                    return;
                }

                // Proceed with AJAX request
                $.ajax({
                    url: '/Attendance/UploadEmployeeAttendance',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(dataToUpload),
                    success: function (response) {
                        fetchEmployeeAttendance();
                        $('#successMessage').text(response.message);
                        $('#successAlert').fadeIn();
                        $('#cardCode').val('').blur();
                        // Optional: Hide error alert if it's still visible
                        $('#errorAlert').hide();

                        // Hide alerts after a delay
                        setTimeout(hideAlerts, 2000);
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                    }
                });
            });
            $(document).on('change', '.status-radio', function () {
                var rowId = $(this).attr('id').split('_')[1]; // Extract the row ID from the radio button ID
                var selectedValue = $(this).val(); // Get the value of the selected radio button

                // Disable/enable input fields based on the selected radio button value
                if (selectedValue === 'absent') {
                    $('#startTime_' + rowId).prop('disabled', true);
                    $('#endTime_' + rowId).prop('disabled', true);
                    $('#date' + rowId).prop('disabled', true);
                    $('#upload').prop('disabled', true);
                } else {
                    $('#startTime_' + rowId).prop('disabled', false);
                    $('#endTime_' + rowId).prop('disabled', false);
                    $('#date' + rowId).prop('disabled', false);
                    $('#upload').prop('disabled', false);
                }
            });
        });

    </script>
}
