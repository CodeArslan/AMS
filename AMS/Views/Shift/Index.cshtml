@model AMS.Models.Shift 
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
</head>

<body>
    <div class="main-content">
        <div class="breadcrumb">
            <ul>
                <li><a href="#">Shift</a></li>
            </ul>
        </div>
        <div class="separator-breadcrumb border-top"></div>
    </div>

    <p\>
        <a class="btn btn-primary m-1" data-bs-toggle="modal" data-target="#addShift" data-whatever="mdo">Add Shift</a>
    </p\>
    <br/>
    <br/>
    <div class="col-md-12 mb-3">
        <div class="card text-start">
            <div class="card-header">
                <h4 class="text-25">Shift List</h4>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-success" role="alert" id="successAlert" style="display:none">
                <strong class="text-capitalize">Success!</strong> <span id="successMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-danger" role="alert" id="errorAlert" style="display:none">
                <strong class="text-capitalize">Error!</strong> <span id="errorMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Shift Details</h5>
                    <div class="table-responsive">
                        <table class="table table-hover table-bordered table-striped" id="shiftTable">
                            <thead class="bg-gray-300">
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Shift Type</th>
                                    <th scope="col">Start Time</th>
                                    <th scope="col">End Time</th>
                                    <th scope="col">Duration</th>
                                    <th scope="col">Location</th>
                                    <th scope="col">Client</th>
                                    <th scope="col">isActive</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
    @*Modal for Add Shift*@

    <div class="modal fade" id="addShift" tabindex="-1" role="dialog" aria-labelledby="verifyModalContent" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyModalContent_title">New Shift</h5>
                    <button class="btn btn-close" type="button" data-bs-dismiss="modal" id="modal-close" aria-label="Close"></button>
                </div>

                @using (Ajax.BeginForm("ShiftDetails", "Shift", new AjaxOptions
                {
                    HttpMethod = "POST",
                    OnSuccess = "handleSuccessforAdd",
                    OnFailure = "handleFailureforAdd",
                }, new { id = "addShiftForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.shiftType, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.shiftType, new SelectList(
                                        new List<SelectListItem>
                                        {
                                            new SelectListItem { Text = "Morning", Value = "Morning" },
                                            new SelectListItem { Text = "Evening", Value = "Evening" },
                                            new SelectListItem { Text = "Night", Value = "Night" }
                                        }, "Value", "Text"), "--Select--", new { @class = "form-control", @id = "addShiftType" })
                                    @Html.ValidationMessageFor(model => model.shiftType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.startTime, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.startTime, "{0:HH:mm}", new { @class = "form-control", @id = "addStartTime", type = "time" })
                                    @Html.ValidationMessageFor(model => model.startTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.endTime, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.endTime, "{0:HH:ii}", new { @class = "form-control", @id = "addEndTime", type = "time" })
                                    @Html.ValidationMessageFor(model => model.endTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.location, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.location, new SelectList(new[]
                                    {
                                        new SelectListItem { Text = "Abu Dhabi", Value = "Abu Dhabi" },
                                        new SelectListItem { Text = "Dubai", Value = "Dubai" },
                                        new SelectListItem { Text = "Sharjah", Value = "Sharjah" },
                                        new SelectListItem { Text = "Musaffah", Value = "Musaffah" }
                                    }, "Value", "Text"), "Select Location", new { @class = "form-control", @id = "addDepartmentLocation" })
                                    @Html.ValidationMessageFor(model => model.location, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.clientName, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.clientName, new SelectList(
                                        new List<SelectListItem>
                                        {
                                            new SelectListItem { Text = "Adnoc", Value = "Adnoc" },
                                            new SelectListItem { Text = "ExxonMobil", Value = "ExxonMobil" },
                                            new SelectListItem { Text = "Royal Dutch Shell", Value = "Royal Dutch Shell" },
                                            new SelectListItem { Text = "Chevron Corporation", Value = "Chevron Corporation" },
                                            new SelectListItem { Text = "BP (British Petroleum)", Value = "BP (British Petroleum)" },
                                            new SelectListItem { Text = "Saudi Aramco", Value = "Saudi Aramco" },
                                            new SelectListItem { Text = "Other", Value = "Other" }
                                        }, "Value", "Text"), "--Select--", new { @class = "form-control", @id = "addClientName" })
                                    @Html.ValidationMessageFor(model => model.clientName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.duration, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.duration, new { @class = "form-control", disabled = "disabled", @id = "addDuration" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-check">
                                    <br />
                                    <br />
                                    @Html.CheckBoxFor(model => model.isActive, new { @class = "form-check-input" })
                                    @Html.LabelFor(model => model.isActive, new { @class = "form-check-label" })
                                    @Html.ValidationMessageFor(model => model.isActive, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" id="cancel" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="submitForm">Add</button>
                    </div>
                }
            </div>
        </div>
    </div>


    @*Modal for Update Shift*@
    <div class="modal fade" id="updateShift" tabindex="-1" role="dialog" aria-labelledby="verifyModalContent" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyModalContent_title">Update Shift</h5>
                    <button class="btn btn-close" type="button" data-bs-dismiss="modal" id="modal-close" aria-label="Close"></button>
                </div>

                @using (Ajax.BeginForm("ShiftDetails", "Shift", new AjaxOptions
                {
                    HttpMethod = "POST",
                    OnSuccess = "handleSuccessforUpdate",
                    OnFailure = "handleFailureforUpdate",
                }, new { id = "updateShiftForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.shiftType, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.shiftType, new SelectList(
                                        new List<SelectListItem>
                                        {
                                            new SelectListItem { Text = "Morning", Value = "Morning" },
                                            new SelectListItem { Text = "Evening", Value = "Evening" },
                                            new SelectListItem { Text = "Night", Value = "Night" }
                                        }, "Value", "Text"), "--Select--", new { @class = "form-control", @id = "updateShiftType" })
                                    @Html.ValidationMessageFor(model => model.shiftType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.startTime, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.startTime, "{0:HH:mm}", new { @class = "form-control", @id = "updateStartTime", type = "time" })
                                    @Html.ValidationMessageFor(model => model.startTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.endTime, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.endTime, "{0:HH:ii}", new { @class = "form-control", @id = "updateEndTime", type = "time" })
                                    @Html.ValidationMessageFor(model => model.endTime, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.location, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.location, new SelectList(new[]
                                    {
                                        new SelectListItem { Text = "Abu Dhabi", Value = "Abu Dhabi" },
                                        new SelectListItem { Text = "Dubai", Value = "Dubai" },
                                        new SelectListItem { Text = "Sharjah", Value = "Sharjah" },
                                        new SelectListItem { Text = "Musaffah", Value = "Musaffah" }
                                    }, "Value", "Text"), "Select Location", new { @class = "form-control", @id = "updateShiftLocation" })
                                    @Html.ValidationMessageFor(model => model.location, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.clientName, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.clientName, new SelectList(
                                        new List<SelectListItem>
                                        {
                                            new SelectListItem { Text = "Adnoc", Value = "Adnoc" },
                                            new SelectListItem { Text = "ExxonMobil", Value = "ExxonMobil" },
                                            new SelectListItem { Text = "Royal Dutch Shell", Value = "Royal Dutch Shell" },
                                            new SelectListItem { Text = "Chevron Corporation", Value = "Chevron Corporation" },
                                            new SelectListItem { Text = "BP (British Petroleum)", Value = "BP (British Petroleum)" },
                                            new SelectListItem { Text = "Saudi Aramco", Value = "Saudi Aramco" }
                                        }, "Value", "Text"), "--Select--", new { @class = "form-control", @id = "updateClientName" })
                                    <input type="text" id="updateCustomClientName" style="display: none;" placeholder="Enter Custom Client Name" />
                                    @Html.ValidationMessageFor(model => model.clientName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.duration, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.duration, new { @class = "form-control", disabled = "disabled", @id = "updateDuration" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-check">
                                    <br />
                                    <br />
                                    @Html.CheckBoxFor(model => model.isActive, new { @class = "form-check-input", @id = "updateIsActive" })
                                    @Html.LabelFor(model => model.isActive, new { @class = "form-check-label" })
                                    @Html.ValidationMessageFor(model => model.isActive, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Id, new { @id = "hiddenShiftId" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" id="updateCancel" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="updateForm">Update</button>
                    </div>
                }
            </div>
        </div>
    </div>
</body>
</html>
@section scripts
{
    <script>

        $(document).ready(function () {


            $("#shiftTable").DataTable({
                ajax: {
                    url: "/Shift/GetShiftData", // Replace with your actual API endpoint to fetch Shift data
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "Id",
                        width: '11px'
                    },
                    {
                        data: "shiftType",
                    },
                    {
                        data: "startTime",
                        render: function (data) {
                            return moment(data, 'HH:mm:ss').format('h:mm A');
                        }
                    },
                    {
                        data: "endTime",
                        render: function (data) {
                            return moment(data, 'HH:mm:ss').format('h:mm A');
                        }
                    },
                    {
                        data: "duration",
                        render: function (data) {
                            // Assuming data is in "HH:mm:ss" format
                            var duration = moment.duration(data);
                            var hours = Math.floor(duration.asHours());
                            var minutes = Math.floor(duration.asMinutes()) % 60;
                            var formattedDuration = hours + " Hours " + minutes + " Minutes";
                            return formattedDuration.trim(); // Trim to remove leading/trailing whitespaces
                        }
                    },
                    {
                        data: "location",
                    },
                    {
                        data: "clientName",
                    },
                    {
                        data: "isActive",
                        render: function (data) {
                            return data ? 'Yes' : 'No';
                        }
                    },
                    {
                        data: "Id", // Use the "Id" property for the action buttons
                        render: function (data) {
                            return "<a class='text-success me-2 btn btn-primary m-1 edit-btn' href='#' data-bs-toggle='modal' data-target='#updateShift' data-whatever='mdo' data-id='" + data + "'><i class='fa fa-edit'></i></a>" +
                                "<a class='text-danger me-2 btn btn-warning delete-btn' id='del' href='#' data-id='" + data + "'><i class='fa fa-trash'></i></a>";
                        }
                    },
                ],
                pagingType: 'full_numbers',
                language: {
                    paginate: {
                        first: 'First',
                        previous: '&lsaquo;',
                        next: '&rsaquo;',
                        last: 'Last'
                    },
                     searchPlaceholder: 'Min 3 Characters'
                },
                autoWidth: false,
                columnDefs: [
                    { width: '100px', targets: '_all' }
                ],
                drawCallback: function () {
                    // Override DataTables styles with Bootstrap styles after each draw
                    $('.dataTables_paginate .paginate_button').removeClass('paginate_button').addClass('page-item');
                    $('.dataTables_paginate .paginate_button a').removeClass('paginate_button').addClass('page-link');
                    $('.dataTables_paginate .paginate_button.current').removeClass('paginate_button').addClass('active');
                    $('.dataTables_paginate .paginate_button.disabled').removeClass('paginate_button').addClass('disabled');
                }
            });

            $('#shiftTable').on('click', '.edit-btn', function () {
                var id = $(this).data('id');
                $.ajax({
                    url: '/Shift/GetShiftById/' + id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (shift) {
                        var startTime = convertTicksToTime(shift.startTime.Ticks);
                        var endTime = convertTicksToTime(shift.endTime.Ticks);

                        $('#updateStartTime').val(startTime);
                        $('#updateEndTime').val(endTime);
                        calculateDuration('updateStartTime', 'updateEndTime', 'updateDuration');
                        $('#hiddenShiftId').val(shift.Id);
                        $('#updateShiftType').val(shift.shiftType);
                        $('#updateShiftLocation').val(shift.location);
                        $('#updateClientName').val(shift.clientName);
                        $('#updateCustomClientName').val(shift.customClientName);
                        $('#updateIsActive').prop('checked', shift.isActive);
                        $('#updateShift').modal('show');
                    },
                    error: function (xhr, status, error) {
                        toastr.error(
                            response.message,
                            "Error",
                            {
                                "class": "btn w-100 btn-outline-danger mb-2",
                                "id": "toast-danger",
                                timeOut: 2000,
                                progressBar: true,
                                closeButton: true
                            }
                        );
                    }
                });
            });
            //delete
            $('#shiftTable').on('click', '#del', function () {
                var id = $(this).data('id');

                bootbox.confirm({
                    message: "Are you sure you want to delete?",
                    buttons: {
                        confirm: {
                            label: 'Confirm',
                            className: 'btn-primary'
                        },
                        cancel: {
                            label: 'Cancel',
                            className: 'btn-secondary'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            // If user confirms, proceed with deletion
                            $.ajax({
                                url: '/Shift/Delete/' + id,
                                type: 'POST',
                                dataType: 'json',
                                success: function (response) {
                                    if (response.success) {
                                        // Show success alert
                                        $('#successMessage').text(response.message);
                                        $('#successAlert').fadeIn();

                                        // Optional: Hide error alert if it's still visible
                                        $('#errorAlert').hide();

                                        // Optionally, you can update the DataTable after successful deletion
                                        $('#shiftTable').DataTable().ajax.reload();

                                        // Hide alerts after a delay
                                        setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                    } else {
                                        // Show error alert
                                        $('#errorMessage').text(response.message);
                                        $('#errorAlert').fadeIn();

                                        // Optional: Hide success alert if it's still visible
                                        $('#successAlert').hide();

                                        // Hide alerts after a delay
                                        setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                    }
                                },
                                error: function (xhr, status, error) {
                                    // Show error alert for AJAX failure
                                    $('#errorMessage').text("An Error Occurred While Deleting Department");
                                    $('#errorAlert').fadeIn();

                                    // Optional: Hide success alert if it's still visible
                                    $('#successAlert').hide();

                                    // Hide alerts after a delay
                                    setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                }
                            });
                        }
                    }
                });
            });
            $("#updateCancel").click(function () {
                toastr.warning(
                    "Updation Cancelled",
                    {
                        "class": "btn w-100 btn-outline-danger mb-2",
                        "id": "toast-danger",
                        progressBar: true,
                        closeButton: true,
                        timeOut: 1000
                    }
                );
            });

        });
        // Bind calculateDuration function to change event of start and end time inputs for add form
        $('#addEndTime').on('change', function () {
            calculateDuration('addStartTime', 'addEndTime', 'addDuration');
        });

        // Bind calculateDuration function to change event of start and end time inputs for update form
        $('#updateEndTime').on('change', function () {
            calculateDuration('updateStartTime', 'updateEndTime', 'updateDuration');
        });
        // Function to convert ticks to time format (HH:mm)
        function convertTicksToTime(ticks) {
            var date = new Date(ticks / 10000 - 62135596800000); // Converting .NET ticks to JavaScript ticks
            var hours = date.getUTCHours().toString().padStart(2, '0');
            var minutes = date.getUTCMinutes().toString().padStart(2, '0');
            return hours + ':' + minutes;
        }
        // This function is used when adding a shift is successful, it will only trigger when adding a shift is successful
        function handleSuccessforAdd(response) {
            $("#addShift").modal('hide');
            if (response.success) {
                $('#successMessage').text(response.message);
                $('#successAlert').show();

                // Optional: Hide error alert if it's still visible
                $('#errorAlert').hide();
                event.preventDefault();

                // Reset the form
                $('#addShiftForm')[0].reset();

                // Reset validation messages
                $('.text-danger.validation-summary-errors').html('');

                 $('#shiftTable').DataTable().ajax.reload();

                // Hide modal after a delay
                setTimeout(function () {
                    $('#addShift').modal('hide');
                }, 1000);

                // Hide alerts after a delay
                setTimeout(hideAlerts, 1000);
            } else {
                $("#addShift").modal('hide');
                // Show error alert
                $('#errorMessage').text(response.message);
                $('#errorAlert').show();

                // Optional: Hide success alert if it's still visible
                $('#successAlert').hide();

                // Hide alerts after a delay
                setTimeout(hideAlerts, 1000);
            }
        }

        // This function is used when adding a shift is failed, it will only trigger when adding a shift is failed
        function handleFailureforAdd() {
            $("#addShift").modal('hide');
            // Show error alert for AJAX failure
            $('#errorMessage').text("An Error Occurred While Adding Shift");
            $('#errorAlert').show();

            // Optional: Hide success alert if it's still visible
            $('#successAlert').hide();

            // Hide alerts after a delay
            setTimeout(hideAlerts, 1000);
        }
        // Function to handle success when updating shift is successful
        function handleSuccessforUpdate(response) {
            if (response.success) {
                // Show success alert
                $('#successMessage').text(response.message);
                $('#successAlert').fadeIn();

                // Optional: Hide error alert if it's still visible
                $('#errorAlert').hide();

                // Other actions (reload data, hide modal, etc.)
                event.preventDefault();
                $('#shiftTable').DataTable().ajax.reload();
                $("#updateShift").modal('hide');
                setTimeout(hideAlerts, 2000);
            } else {
                // Show error alert
                $('#errorMessage').text(response.message);
                $('#errorAlert').fadeIn();

                // Optional: Hide success alert if it's still visible
                $('#successAler').hide();
                setTimeout(hideAlerts, 2000);
            }
        }

        // Function to handle failure when updating shift fails
        function handleFailureforUpdate() {
            // Show error alert for AJAX failure
            $('#errorMessage').text("An Error Occurred While Updating Shift");
            $('#errorAlert').fadeIn();

            // Optional: Hide success alert if it's still visible
            $('#successAlert').hide();
            setTimeout(hideAlerts, 2000);
        }
        //Function to calculate duration based on start and end time
        function calculateDuration(startTimeFieldId, endTimeFieldId, durationFieldId) {
            var startTime = $('#' + startTimeFieldId).val();
            var endTime = $('#' + endTimeFieldId).val();

            // Convert start and end time to JavaScript Date objects
            var start = new Date("01/01/2020 " + startTime); // Assuming date doesn't matter for calculation
            var end = new Date("01/01/2020 " + endTime); // Assuming date doesn't matter for calculation

            // Check if end time is before start time (end time is of the next day)
            if (end < start) {
                // Add 24 hours to end time
                end.setDate(end.getDate() + 1);
            }

            // Calculate duration in milliseconds
            var durationMs = end - start;

            // Convert duration to hours and minutes
            var hours = Math.floor(durationMs / (1000 * 60 * 60));
            var minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));

            // Format duration
            var duration = hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0');

            // Set duration value to duration field
            $('#' + durationFieldId).val(duration);
        }

    </script>
}


