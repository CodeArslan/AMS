@model AMS.ViewModels.LabourViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
</head>

<body>
    <div class="main-content">
        <div class="breadcrumb">
            <ul>
                <li><a href="#">Labour</a></li>
            </ul>
        </div>
        <div class="separator-breadcrumb border-top"></div>
    </div>

    <p\>
        <a class="btn btn-primary m-1" data-bs-toggle="modal" data-target="#addLabour" data-whatever="mdo">Add Labour</a>
    </p\>
    <br />
    <br />
    <div class="col-md-12 mb-3">
        <div class="card text-start">
            <div class="card-header">
                <h4 class="text-25">Labour List</h4>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-success" role="alert" id="successAlert" style="display:none">
                <strong class="text-capitalize">Success!</strong> <span id="successMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-danger" role="alert" id="errorAlert" style="display:none">
                <strong class="text-capitalize">Error!</strong> <span id="errorMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Labour Details</h5>
                    <div class="table-responsive">
                        <table class="table table-hover table-bordered table-striped" id="labourTable">
                            <thead class="bg-gray-300">
                                <tr>
                                    <th scope="col">Labour Number</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Email</th>
                                    <th scope="col">CNIC</th>
                                    <th scope="col">Per Hour Wage</th>
                                    <th scope="col">Total Pay</th>
                                    <th scope="col">Department</th>
                                    <th scope="col">isActive</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
    @*Modal for Add Shift*@

    <div class="modal fade" id="addLabour" tabindex="-1" role="dialog" aria-labelledby="verifyModalContent" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyModalContent_title">New Labour</h5>
                    <button class="btn btn-close" type="button" data-bs-dismiss="modal" id="modal-close" aria-label="Close"></button>
                </div>

                @using (Ajax.BeginForm("LabourDetails", "Labour", new AjaxOptions
                {
                    HttpMethod = "POST",
                    OnSuccess = "handleSuccessforAdd",
                    OnFailure = "handleFailureforAdd",
                }, new { id = "addLabourForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.FirstName, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.FirstName, new { @class = "form-control", @id = "addFirstName", placeholder = "Enter First Name" })
                                    @Html.ValidationMessageFor(model => model.Labour.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.LastName, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.LastName, new { @class = "form-control", @id = "addLastName", placeholder = "Enter Last Name" })
                                    @Html.ValidationMessageFor(model => model.Labour.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.Email, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.Email, new { @class = "form-control", @id = "addEmail", placeholder = "Enter Email" })
                                    @Html.ValidationMessageFor(model => model.Labour.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.CNIC, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.CNIC, new { @class = "form-control", @id = "addCNIC", placeholder = "Enter CNIC" })
                                    @Html.ValidationMessageFor(model => model.Labour.CNIC, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.perHour, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.perHour, new { @class = "form-control", @id = "addPerHour", placeholder = "Enter Per Hour Wage" })
                                    @Html.ValidationMessageFor(model => model.Labour.perHour, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.totalPay, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.totalPay, new { @class = "form-control", @id = "addTotalPay", placeholder = "Enter Total Pay" })
                                    @Html.ValidationMessageFor(model => model.Labour.totalPay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.departmentId, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.Labour.departmentId, new SelectList(Model.Department, "Id", "deptName"), " --Select--", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Labour.departmentId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <br />
                                    <br />
                                    @Html.CheckBoxFor(model => model.Labour.isActive, new { @class = "form-check-input" })
                                    @Html.LabelFor(model => model.Labour.isActive, new { @class = "form-check-label" })
                                    @Html.ValidationMessageFor(model => model.Labour.isActive, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" id="cancel" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="submitForm">Add</button>
                    </div>
                }
            </div>
        </div>
    </div>


    @*Modal for Update Shift*@
    <div class="modal fade" id="updateLabour" tabindex="-1" role="dialog" aria-labelledby="verifyModalContent" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyModalContent_title">Update Labour</h5>
                    <button class="btn btn-close" type="button" data-bs-dismiss="modal" id="modal-close" aria-label="Close"></button>
                </div>

                @using (Ajax.BeginForm("LabourDetails", "Labour", new AjaxOptions
                {
                    HttpMethod = "POST",
                    OnSuccess = "handleSuccessforUpdate",
                    OnFailure = "handleFailureforUpdate",
                }, new { id = "updateLabourForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.FirstName, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.FirstName, new { @class = "form-control", placeholder = "First Name", id = "updateLabourFirstName" })
                                    @Html.ValidationMessageFor(model => model.Labour.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.LastName, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.LastName, new { @class = "form-control", placeholder = "Last Name", id = "updateLabourLastName" })
                                    @Html.ValidationMessageFor(model => model.Labour.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.Email, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.Email, new { @class = "form-control", placeholder = "Email", id = "updateLabourEmail" })
                                    @Html.ValidationMessageFor(model => model.Labour.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.CNIC, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.CNIC, new { @class = "form-control", placeholder = "CNIC", id = "updateLabourCNIC" })
                                    @Html.ValidationMessageFor(model => model.Labour.CNIC, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.perHour, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.perHour, new { @class = "form-control", placeholder = "Per Hour Wage", id = "updateLabourPerHour" })
                                    @Html.ValidationMessageFor(model => model.Labour.perHour, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.totalPay, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.Labour.totalPay, new { @class = "form-control", placeholder = "Total Pay", id = "updateLabourTotalPay" })
                                    @Html.ValidationMessageFor(model => model.Labour.totalPay, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Labour.departmentId, new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.Labour.departmentId, new SelectList(Model.Department, "Id", "deptName"), " --Select--", new { @class = "form-control", id = "updateLabourDepartmentId" })
                                    @Html.ValidationMessageFor(model => model.Labour.departmentId, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.Labour.Id, new { @id = "updateLabourId" });
                                </div>
                            </div>
                            <div class="col-md-4">
                                    <div class="form-check">
                                        <br />
                                        <br />
                                        @Html.CheckBoxFor(model => model.Labour.isActive, new { @class = "form-check-input" })
                                        @Html.LabelFor(model => model.Labour.isActive, new { @class = "form-check-label",@id="labouractiveCheck" })
                                        @Html.ValidationMessageFor(model => model.Labour.isActive, "", new { @class = "text-danger" })
                                    </div>
                            </div>
                        </div>

                    </div>


                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" id="updateCancel" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="updateForm">Update</button>
                    </div>
                }
            </div>
        </div>
    </div>
</body>
</html>
@section scripts
{
    <script>

        $(document).ready(function () {


            $("#labourTable").DataTable({
                ajax: {
                    url: "/Labour/GetLabourData", // Replace with your actual API endpoint to fetch Labour data
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "labourNumber",
                        width: '11px'
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            // Concatenate first and last names
                            var fullName = row.FirstName + " " + row.LastName;
                            return fullName;
                        }
                    },
                    {
                        data: "Email",
                    },
                    {
                        data: "CNIC",
                    },
                    {
                        data: "perHour",
                    },
                    {
                        data: "totalPay",
                    },
                    {
                        data: "Department.deptName", // Assuming Department is an object with a property you want to display
                        render: function (data) {
                            // Assuming Department has a property called departmentName
                            return data;
                        },
                    },
                    {
                        data: "isActive",
                        render: function (data, type, row) {
                            if (type === 'display') {
                                var status = data ? 'Active' : 'In-Active';
                                var badgeClass = data ? 'bg-success' : 'bg-danger';
                                return '<span class="badge rounded-pill ' + badgeClass + ' text-white p-2 m-1">' + status + '</span>';
                            }
                            return data ? 'Active' : 'In-Active';
                        },
                        orderable: false, // Disable sorting for this column
                        searchable: false, // Disable searching for this column
                    },
                    {
                        data: "Id", // Use the "Id" property for the action buttons
                        render: function (data) {
                            return "<a class='text-success me-2 btn btn-primary m-1 edit-btn' href='#' data-bs-toggle='modal' data-target='#updateLabour' data-whatever='mdo' data-id='" + data + "'><i class='fa fa-edit'></i></a>" +
                                "<a class='text-danger me-2 btn btn-warning delete-btn' id='del' href='#' data-id='" + data + "'><i class='fa fa-trash'></i></a>";
                        }
                    },
                ],
                pagingType: 'full_numbers',
                language: {
                    paginate: {
                        first: 'First',
                        previous: '&lsaquo;',
                        next: '&rsaquo;',
                        last: 'Last'
                    },
                    searchPlaceholder: 'Min 3 Characters'
                },
                autoWidth: false,
                columnDefs: [
                    { width: '100px', targets: '_all' }
                ],
                drawCallback: function () {
                    // Override DataTables styles with Bootstrap styles after each draw
                    $('.dataTables_paginate .paginate_button').removeClass('paginate_button').addClass('page-item');
                    $('.dataTables_paginate .paginate_button a').removeClass('paginate_button').addClass('page-link');
                    $('.dataTables_paginate .paginate_button.current').removeClass('paginate_button').addClass('active');
                    $('.dataTables_paginate .paginate_button.disabled').removeClass('paginate_button').addClass('disabled');
                }
            });

            $('#labourTable').on('click', '.edit-btn', function () {
                var id = $(this).data('id');
                $.ajax({
                    url: '/Labour/GetLabourById/' + id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (labour) {
                        $('#updateLabourFirstName').val(labour.FirstName);
                        $('#updateLabourLastName').val(labour.LastName);
                        $('#updateLabourEmail').val(labour.Email);
                        $('#updateLabourCNIC').val(labour.CNIC);
                        $('#updateLabourPerHour').val(labour.perHour);
                        $('#updateLabourTotalPay').val(labour.totalPay);
                        $('#updateLabourDepartmentId').val(labour.departmentId);
                        $('#updateLabourId').val(labour.Id);
                        $('#labouractiveCheck').prop('checked', labour.isActive);
                        $('#updateLabour').modal('show');
                    },
                    error: function (xhr, status, error) {
                        toastr.error(
                            response.message,
                            "Error",
                            {
                                "class": "btn w-100 btn-outline-danger mb-2",
                                "id": "toast-danger",
                                timeOut: 2000,
                                progressBar: true,
                                closeButton: true
                            }
                        );
                    }
                });
            });
            //delete
            $('#labourTable').on('click', '#del', function () {
                var id = $(this).data('id');

                bootbox.confirm({
                    message: "Are you sure you want to delete?",
                    buttons: {
                        confirm: {
                            label: 'Confirm',
                            className: 'btn-primary'
                        },
                        cancel: {
                            label: 'Cancel',
                            className: 'btn-secondary'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            // If user confirms, proceed with deletion
                            $.ajax({
                                url: '/Labour/Delete/' + id,
                                type: 'POST',
                                dataType: 'json',
                                success: function (response) {
                                    if (response.success) {
                                        // Show success alert
                                        $('#successMessage').text(response.message);
                                        $('#successAlert').fadeIn();

                                        // Optional: Hide error alert if it's still visible
                                        $('#errorAlert').hide();

                                        // Optionally, you can update the DataTable after successful deletion
                                        $('#labourTable').DataTable().ajax.reload();

                                        // Hide alerts after a delay
                                        setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                    } else {
                                        // Show error alert
                                        $('#errorMessage').text(response.message);
                                        $('#errorAlert').fadeIn();

                                        // Optional: Hide success alert if it's still visible
                                        $('#successAlert').hide();

                                        // Hide alerts after a delay
                                        setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                    }
                                },
                                error: function (xhr, status, error) {
                                    // Show error alert for AJAX failure
                                    $('#errorMessage').text("An Error Occurred While Deleting Labour");
                                    $('#errorAlert').fadeIn();

                                    // Optional: Hide success alert if it's still visible
                                    $('#successAlert').hide();

                                    // Hide alerts after a delay
                                    setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                }
                            });
                        }
                    }
                });
            });
            $("#updateCancel").click(function () {
                toastr.warning(
                    "Updation Cancelled",
                    {
                        "class": "btn w-100 btn-outline-danger mb-2",
                        "id": "toast-danger",
                        progressBar: true,
                        closeButton: true,
                        timeOut: 1000
                    }
                );
            });

        });
        // This function is used when adding a shift is successful, it will only trigger when adding a shift is successful
        function handleSuccessforAdd(response) {
            $("#addLabour").modal('hide');
            if (response.success) {
                $('#successMessage').text(response.message);
                $('#successAlert').show();

                // Optional: Hide error alert if it's still visible
                $('#errorAlert').hide();
                event.preventDefault();

                // Reset the form
                $('#addLabourForm')[0].reset();

                // Reset validation messages
                $('.text-danger.validation-summary-errors').html('');

                 $('#labourTable').DataTable().ajax.reload();

                // Hide modal after a delay
                setTimeout(function () {
                    $('#addShift').modal('hide');
                }, 1000);

                // Hide alerts after a delay
                setTimeout(hideAlerts, 1000);
            } else {
                $("#addLabour").modal('hide');
                // Show error alert
                $('#errorMessage').text(response.message);
                $('#errorAlert').show();

                // Optional: Hide success alert if it's still visible
                $('#successAlert').hide();

                // Hide alerts after a delay
                setTimeout(hideAlerts, 1000);
            }
        }

        // This function is used when adding a shift is failed, it will only trigger when adding a shift is failed
        function handleFailureforAdd() {
            $("#addLabour").modal('hide');
            // Show error alert for AJAX failure
            $('#errorMessage').text("An Error Occurred While Adding Shift");
            $('#errorAlert').show();

            // Optional: Hide success alert if it's still visible
            $('#successAlert').hide();

            // Hide alerts after a delay
            setTimeout(hideAlerts, 1000);
        }
        // Function to handle success when updating shift is successful
        function handleSuccessforUpdate(response) {
            if (response.success) {
                // Show success alert
                $('#successMessage').text(response.message);
                $('#successAlert').fadeIn();

                // Optional: Hide error alert if it's still visible
                $('#errorAlert').hide();

                // Other actions (reload data, hide modal, etc.)
                event.preventDefault();
                $('#labourTable').DataTable().ajax.reload();
                $("#updateLabour").modal('hide');
                setTimeout(hideAlerts, 2000);
            } else {
                // Show error alert
                $('#errorMessage').text(response.message);
                $('#errorAlert').fadeIn();

                // Optional: Hide success alert if it's still visible
                $('#successAlert').hide();
                setTimeout(hideAlerts, 2000);
            }
        }

        // Function to handle failure when updating shift fails
        function handleFailureforUpdate() {
            // Show error alert for AJAX failure
            $('#errorMessage').text("An Error Occurred While Updating Shift");
            $('#errorAlert').fadeIn();

            // Optional: Hide success alert if it's still visible
            $('#successAlert').hide();
            setTimeout(hideAlerts, 2000);
        }
        //Function to calculate duration based on start and end time
        function calculateDuration(startTimeFieldId, endTimeFieldId, durationFieldId) {
            var startTime = $('#' + startTimeFieldId).val();
            var endTime = $('#' + endTimeFieldId).val();

            // Convert start and end time to JavaScript Date objects
            var start = new Date("01/01/2020 " + startTime); // Assuming date doesn't matter for calculation
            var end = new Date("01/01/2020 " + endTime); // Assuming date doesn't matter for calculation

            // Check if end time is before start time (end time is of the next day)
            if (end < start) {
                // Add 24 hours to end time
                end.setDate(end.getDate() + 1);
            }

            // Calculate duration in milliseconds
            var durationMs = end - start;

            // Convert duration to hours and minutes
            var hours = Math.floor(durationMs / (1000 * 60 * 60));
            var minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));

            // Format duration
            var duration = hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0');

            // Set duration value to duration field
            $('#' + durationFieldId).val(duration);
        }

    </script>
}
