@model AMS.Models.RegisterViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <style>
        .requiredstar::after {
            content: "*";
            color: red;
        }
    </style>
</head>

<body>
    <div class="main-content">
        <div class="breadcrumb">
            <ul>
                <li><a href="#">Labour</a></li>
            </ul>
        </div>
        <div class="separator-breadcrumb border-top"></div>
    </div>

    <p\>
        <a class="btn btn-primary m-1" data-bs-toggle="modal" data-target="#addLabour" data-whatever="mdo">Add Labour</a>
    </p\>
    <br />
    <br />
    <div class="col-md-12 mb-3">
        <div class="card text-start">
            <div class="card-header">
                <h4 class="text-25">Labour List</h4>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-success" role="alert" id="successAlert" style="display:none">
                <strong class="text-capitalize">Success!</strong> <span id="successMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-danger" role="alert" id="errorAlert" style="display:none">
                <strong class="text-capitalize">Error!</strong> <span id="errorMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Labour Details</h5>
                    <div class="table-responsive">
                        <table class="table table-hover table-bordered table-striped" id="labourTable">
                            <thead class="bg-gray-300">
                                <tr>
                                    <th scope="col">Labour Number</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Email</th>
                                    <th scope="col">CNIC</th>
                                    <th scope="col">Per Hour Wage</th>
                                    <th scope="col">Total Pay</th>
                                    <th scope="col">Department</th>
                                    <th scope="col">isActive</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
    @*Modal for Add Shift*@

    <div class="modal fade" id="addLabour" tabindex="-1" role="dialog" aria-labelledby="verifyModalContent" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyModalContent_title">New Labour</h5>
                    <button class="btn btn-close" type="button" data-bs-dismiss="modal" id="modal-close" aria-label="Close"></button>
                </div>

              
                @using (Ajax.BeginForm("Register", "Labour", new AjaxOptions
                {
                    HttpMethod = "POST",
                    OnBegin= "onBeginforAdd",
                    OnSuccess = "handleSuccessforAdd",
                    OnFailure = "handleFailureforAdd",
                }, new { id = "addLabourForm", role = "form" }))
                {

                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <hr />
                        @Html.ValidationSummary("", new { @class = "text-danger",@id="validationSummaryForAdd" })
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FirstName, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @id = "firstName", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastName, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", @id = "lastName", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Email, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "email", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Password, new { @class = "col-form-label requiredstar" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "password", autocomplete = "off", type = "password" })
                                        <span class="input-group-text" id="togglePassword">
                                            <i class="fa fa-eye-slash"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-form-label" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.ConfirmPassword, new { @class = "form-control", @id = "confirmPassword", autocomplete = "off", type = "password" })
                                        <span class="input-group-text" id="toggleConfirmPassword">
                                            <i class="fa fa-eye-slash"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.DepartmentId, new { @class = "col-form-label requiredstar" })
                                    @Html.DropDownListFor(m => m.DepartmentId, new SelectList(Model.Department, "Id", "deptName"), " --Select--", new { @class = "form-control", @id = "departmentId" })
                                    @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.perHour, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.perHour, new { @class = "form-control", @id = "perHour", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.perHour, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CNIC, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.CNIC, new { @class = "form-control", @id = "cnic", autocomplete = "off" })
                                    <span class="text-danger" id="cnic-validation" style="display: none;">Please enter a valid CNIC (e.g., 12345-1234567-1)</span>
                                    @Html.ValidationMessageFor(model => model.CNIC, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Address, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Address, new { @class = "form-control", @id = "address", autocomplete = "off", placeholder = "Building/Street/Area, City, UAE" })
                                    @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">

                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Phone, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", @id = "phone", autocomplete = "off" })
                                    <span class="text-danger" id="phone-validation" style="display: none;">Please enter a valid phone number (e.g., +971-45-1234567)</span>
                                    @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Designation, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Designation, new { @class = "form-control", @id = "designation", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Role, new { @class = "col-form-label requiredstar" })
                                @Html.DropDownListFor(model => model.Role, new SelectList(new[]
          {
              new SelectListItem { Text = "Select Role" },
              new SelectListItem { Text = "Labour", Value = "Labour" }
          }, "Value", "Text"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })

                            </div>
                        </div>
                        <div class="row">
                           
                            <div class="col-md-4">
                                <div class="form-check">
                                    <br />
                                    <br />
                                    @Html.CheckBoxFor(model => model.isActive, new { @class = "form-check-input" })
                                    @Html.LabelFor(model => model.isActive, new { @class = "form-check-label" })
                                    @Html.ValidationMessageFor(model => model.isActive, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Gender, new { @class = "col-form-label requiredstar" })
                                    <div>
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(model => model.Gender, "Male", new { id = "genderMale" })
                                            Male
                                        </label>
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(model => model.Gender, "Female", new { id = "genderFemale" })
                                            Female
                                        </label>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" id="cancel" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="submitForm">Add</button>
                    </div>
                }
            </div>
        </div>
    </div>


    @*Modal for Update Shift*@
    <div class="modal fade" id="updateLabour" tabindex="-1" role="dialog" aria-labelledby="verifyModalContent" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="verifyModalContent_title">Update Labour</h5>
                    <button class="btn btn-close" type="button" data-bs-dismiss="modal" id="modal-close" aria-label="Close"></button>
                </div>

                @using (Ajax.BeginForm("Register", "Labour", new AjaxOptions
                {
                    HttpMethod = "POST",
                    OnBegin= "onBeginForUpdate",
                    OnSuccess = "handleSuccessforUpdate",
                    OnFailure = "handleFailureforUpdate",
                }, new { id = "updateLabourForm" }))
                {

                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <hr />
                        @Html.ValidationSummary("", new { @class = "text-danger", @id = "validationSummaryForUpdate" })
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FirstName, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @id = "firstNameUpdate", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastName, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", @id = "lastNameUpdate", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Email, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "emailUpdate", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.DepartmentId, new { @class = "col-form-label requiredstar" })
                                    @Html.DropDownListFor(m => m.DepartmentId, new SelectList(Model.Department, "Id", "deptName"), " --Select--", new { @class = "form-control", @id = "departmentIdUpdate" })
                                    @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.perHour, new { @class = "col-form-label" })
                                    @Html.TextBoxFor(model => model.perHour, new { @class = "form-control", @id = "perHourUpdate", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.perHour, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CNIC, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.CNIC, new { @class = "form-control", @id = "cnicUpdate", autocomplete = "off" })
                                    <span class="text-danger" id="cnic-update-validation" style="display: none;">Please enter a valid CNIC (e.g., 12345-1234567-1)</span>
                                    @Html.ValidationMessageFor(model => model.CNIC, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">

                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Address, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Address, new { @class = "form-control", @id = "addressUpdate", autocomplete = "off", placeholder = "Building/Street/Area, City, UAE" })
                                    @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Phone, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", @id = "phoneUpdate", autocomplete = "off" })
                                    <span class="text-danger" id="phone-update-validation" style="display: none;">Please enter a valid phone number (e.g., +971-45-1234567)</span>
                                    @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Designation, new { @class = "col-form-label requiredstar" })
                                    @Html.TextBoxFor(model => model.Designation, new { @class = "form-control", @id = "designationUpdate", autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Role, new { @class = "col-form-label requiredstar" })
                                @Html.DropDownListFor(model => model.Role, new SelectList(new[]
          {
              new SelectListItem { Text = "Select Role" },
              new SelectListItem { Text = "Labour", Value = "Labour" }
          }, "Value", "Text"), new { @class = "form-control", @id = "roleUpdate" })
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-4">
                                <div class="form-check">
                                    <br />
                                    <br />
                                    @Html.CheckBoxFor(model => model.isActive, new { @class = "form-check-input", @id = "isActiveUpdate" })
                                    @Html.LabelFor(model => model.isActive, new { @class = "form-check-label" })
                                    @Html.ValidationMessageFor(model => model.isActive, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Gender, new { @class = "col-form-label requiredstar" })
                                    <div>
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(model => model.Gender, "Male", new { id = "genderMaleUpdate" })
                                            Male
                                        </label>
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(model => model.Gender, "Female", new { id = "genderFemaleUpdate" })
                                            Female
                                        </label>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="modal-footer">
                        @Html.HiddenFor(d => d.Id, new { @id = "hiddenId" })
                        <button class="btn btn-secondary" type="button" id="updateCancel" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="updateForm">Update</button>
                    </div>
                }
            </div>
        </div>
    </div>
</body>
</html>
@section scripts
{
    <script>
        $(document).ready(function () {
            $('#addLabour').on('hidden.bs.modal', function () {
                $('.text-danger').html('');
                // Reset the form
                $('#addLabourForm')[0].reset();
                // Clear any error messages
                $('#validationSummaryForAdd').html('');
            });
            $('#updateLabour').on('hidden.bs.modal', function () {
                $('.text-danger').html('');
                // Reset the form
                $('#updateLabourForm')[0].reset();
                // Clear any error messages
                $('#validationSummaryForUpdate').html('');
            });
            $('#cnic').inputmask('99999-9999999-9');
            $('#cnicUpdate').inputmask('99999-9999999-9');
            $('#phone').inputmask("+971-99-9999999", { placeholder: "+971-xx-xxxxxxx" });
            $('#phoneUpdate').inputmask("+971-99-9999999", { placeholder: "+971-xx-xxxxxxx" });
            $('#cnic').blur(function () {
                var cnic = $("#cnic").val().replace(/-/g, '');
                var cnicDigitsOnly = cnic.replace(/\D/g, '');
                if (cnicDigitsOnly.length !== 13) {
                    $("#cnic-validation").html("Please enter a valid CNIC (e.g., 12345-1234567-1)").show();
                } else {
                    $("##cnic-validation").hide();
                }
            });
            $('#cnicUpdate').blur(function () {
                var cnic = $("#cnicUpdate").val().replace(/-/g, '');
                var cnicDigitsOnly = cnic.replace(/\D/g, '');
                if (cnicDigitsOnly.length !== 13) {
                    $("#cnic-update-validation").html("Please enter a valid CNIC (e.g., 12345-1234567-1)").show();
                } else {
                    $("#cnic-update-validation").hide();
                }
            });
            $('#phone').blur(function () {
                var phone = $("#phone").val();
                if (!phone.match(/^\+971-\d{2}-\d{7}$/)) {
                    $("#phone-validation").html("Please enter a valid phone number (e.g., +971-45-1234567)").show();
                } else {
                    $("#phone-validation").hide();
                }
            });
            $("#phoneUpdate").blur(function () {
                var phone = $("#phoneUpdate").val();

                if (!phone.match(/^\+971-\d{2}-\d{7}$/)) {
                    $("#phone-update-validation").html("Please enter a valid phone number (e.g., +971-45-1234567)").show();
                } else {
                    $("#phone-update-validation").hide();
                }
            });
            $('#togglePassword').click(function () {
                event.preventDefault();
                var passwordField = $('#password');
                var passwordFieldType = passwordField.attr('type');
                if (passwordFieldType === 'password') {
                    passwordField.attr('type', 'text');
                    $('#togglePassword i').removeClass('fa-eye-slash');
                    $('#togglePassword i').addClass('fa-eye');
                } else {
                    passwordField.attr('type', 'password');
                    $('#togglePassword i').removeClass('fa-eye');
                    $('#togglePassword i').addClass('fa-eye-slash');
                }
            });

            // Function to toggle confirm password visibility
            $('#toggleConfirmPassword').click(function () {
                event.preventDefault();
                var confirmPasswordField = $('#confirmPassword');
                var confirmPasswordFieldType = confirmPasswordField.attr('type');
                if (confirmPasswordFieldType === 'password') {
                    confirmPasswordField.attr('type', 'text');
                    $('#toggleConfirmPassword i').removeClass('fa-eye-slash');
                    $('#toggleConfirmPassword i').addClass('fa-eye');
                } else {
                    confirmPasswordField.attr('type', 'password');
                    $('#toggleConfirmPassword i').removeClass('fa-eye');
                    $('#toggleConfirmPassword i').addClass('fa-eye-slash');
                }
            });

            $("#labourTable").DataTable({
                ajax: {
                    url: "/Labour/GetLabourData", // Replace with your actual API endpoint to fetch Labour data
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "employeeNumber",
                        width: '11px'
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            // Concatenate first and last names
                            var fullName = row.FirstName + " " + row.LastName;
                            return fullName;
                        }
                    },
                    {
                        data: "Email",
                    },
                    {
                        data: "CNIC",
                    },
                    {
                        data: "perHour",
                    },
                    {
                        data: "totalPay",
                    },
                    {
                        data: "Department.deptName", // Assuming Department is an object with a property you want to display
                        render: function (data) {
                            // Assuming Department has a property called departmentName
                            return data;
                        },
                    },
                    {
                        data: "isActive",
                        render: function (data, type, row) {
                            if (type === 'display') {
                                var status = data ? 'Active' : 'In-Active';
                                var badgeClass = data ? 'bg-success' : 'bg-danger';
                                return '<span class="badge rounded-pill ' + badgeClass + ' text-white p-2 m-1">' + status + '</span>';
                            }
                            return data ? 'Active' : 'In-Active';
                        },
                        orderable: false, // Disable sorting for this column
                        searchable: false, // Disable searching for this column
                    },
                    {
                        data: "Id", // Use the "Id" property for the action buttons
                        render: function (data) {
                            return "<a class='text-success me-2 btn btn-primary m-1 edit-btn' href='#' data-bs-toggle='modal' data-target='#updateLabour' data-whatever='mdo' data-id='" + data + "'><i class='fa fa-edit'></i></a>" +
                                "<a class='text-danger me-2 btn btn-warning delete-btn' id='del' href='#' data-id='" + data + "'><i class='fa fa-trash'></i></a>";
                        }
                    },
                ],
                pagingType: 'full_numbers',
                language: {
                    paginate: {
                        first: 'First',
                        previous: '&lsaquo;',
                        next: '&rsaquo;',
                        last: 'Last'
                    },
                    searchPlaceholder: 'Min 3 Characters'
                },
                autoWidth: false,
                columnDefs: [
                    { width: '100px', targets: '_all' }
                ],
                drawCallback: function () {
                    // Override DataTables styles with Bootstrap styles after each draw
                    $('.dataTables_paginate .paginate_button').removeClass('paginate_button').addClass('page-item');
                    $('.dataTables_paginate .paginate_button a').removeClass('paginate_button').addClass('page-link');
                    $('.dataTables_paginate .paginate_button.current').removeClass('paginate_button').addClass('active');
                    $('.dataTables_paginate .paginate_button.disabled').removeClass('paginate_button').addClass('disabled');
                }
            });

            $('#labourTable').on('click', '.edit-btn', function () {
                var id = $(this).data('id');
                $.ajax({
                    url: '/Labour/GetLabourById/' + id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (labour) {
                        $('#hiddenId').val(labour.Id);
                        $('#firstNameUpdate').val(labour.FirstName);
                        $('#lastNameUpdate').val(labour.LastName);
                        $('#emailUpdate').val(labour.Email);
                        $('#cnicUpdate').val(labour.CNIC);
                        $('#perHourUpdate').val(labour.perHour);
                        $('#departmentIdUpdate').val(labour.DepartmentId);
                        $('#addressUpdate').val(labour.Address);
                        $('#phoneUpdate').val(labour.Phone);
                        $('#designationUpdate').val(labour.Designation);
                        $('#roleUpdate').val(labour.Role);
                        $('#isActiveUpdate').prop('checked', labour.isActive==true);
                        $('#genderMaleUpdate').prop('checked', labour.Gender === 'Male');
                        $('#genderFemaleUpdate').prop('checked', labour.Gender === 'Female');
                        $('#updateLabour').modal('show');
                    },
                    error: function (xhr, status, error) {
                        toastr.error(
                            response.message,
                            "Error",
                            {
                                "class": "btn w-100 btn-outline-danger mb-2",
                                "id": "toast-danger",
                                timeOut: 2000,
                                progressBar: true,
                                closeButton: true
                            }
                        );
                    }
                });
            });
            //delete
            $('#labourTable').on('click', '#del', function () {
                var id = $(this).data('id');

                bootbox.confirm({
                    message: "Are you sure you want to delete?",
                    buttons: {
                        confirm: {
                            label: 'Confirm',
                            className: 'btn-primary'
                        },
                        cancel: {
                            label: 'Cancel',
                            className: 'btn-secondary'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            // If user confirms, proceed with deletion
                            $.ajax({
                                url: '/Labour/Delete/' + id,
                                type: 'POST',
                                dataType: 'json',
                                success: function (response) {
                                    if (response.success) {
                                        // Show success alert
                                        $('#successMessage').text(response.message);
                                        $('#successAlert').fadeIn();

                                        // Optional: Hide error alert if it's still visible
                                        $('#errorAlert').hide();

                                        // Optionally, you can update the DataTable after successful deletion
                                        $('#labourTable').DataTable().ajax.reload();

                                        // Hide alerts after a delay
                                        setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                    } else {
                                        // Show error alert
                                        $('#errorMessage').text(response.message);
                                        $('#errorAlert').fadeIn();

                                        // Optional: Hide success alert if it's still visible
                                        $('#successAlert').hide();

                                        // Hide alerts after a delay
                                        setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                    }
                                },
                                error: function (xhr, status, error) {
                                    // Show error alert for AJAX failure
                                    $('#errorMessage').text("An Error Occurred While Deleting Labour");
                                    $('#errorAlert').fadeIn();

                                    // Optional: Hide success alert if it's still visible
                                    $('#successAlert').hide();

                                    // Hide alerts after a delay
                                    setTimeout(hideAlerts, 2000); // Adjust the delay as needed (in milliseconds)
                                }
                            });
                        }
                    }
                });
            });
            $("#updateCancel").click(function () {
                toastr.warning(
                    "Updation Cancelled",
                    {
                        "class": "btn w-100 btn-outline-danger mb-2",
                        "id": "toast-danger",
                        progressBar: true,
                        closeButton: true,
                        timeOut: 1000
                    }
                );
            });

        });
        function onBeginforAdd() {
            var isValid = true;

            var cnic = document.getElementById('cnic').value.replace(/-/g, '');
            var cnicDigitsOnly = cnic.replace(/\D/g, ''); // Remove non-digit characters
            if (cnicDigitsOnly.length !== 13) {
                $("#cnic-validation").html("Please enter a valid CNIC (e.g., 12345-1234567-1)").show();
                isValid = false;

            }
            var phone = document.getElementById('phone').value;
            if (!phone.match(/^\+971-\d{2}-\d{7}$/)) {
                $("#phone-validation").html("Please enter a valid phone number (e.g., +971-45-1234567)").show();                isValid = false;

            }
            if (isValid == true) {
                showSpinner();
            }
            return isValid;

        }
        function onBeginForUpdate() {

            var isValid = true;
            var cnic = document.getElementById('cnicUpdate').value.replace(/-/g, ''); // Remove hyphens
            var cnicDigitsOnly = cnic.replace(/\D/g, ''); // Remove non-digit characters
            if (cnicDigitsOnly.length !== 13) {
                $("#cnic-update-validation").html("Please enter a valid CNIC (e.g., 12345-1234567-1)").show();
                isValid = false;
            }
            var phone = document.getElementById('phoneUpdate').value;
            if (!phone.match(/^\+971-\d{2}-\d{7}$/)) {
                $("#phone-update-validation").html("Please enter a valid phone number (e.g., +971-45-1234567)").show();                event.preventDefault(); // Prevent form submission
                isValid = false;
            }
            if (isValid == true) {
                showSpinner();
            }
            return isValid;
        }

        // This function is used when adding a shift is successful, it will only trigger when adding a shift is successful
        function handleSuccessforAdd(response) {
            hideSpinner();
            if (response.success) {
                $("#addLabour").modal('hide');

                $('#successMessage').text(response.message);
                $('#successAlert').show();

                // Optional: Hide error alert if it's still visible
                $('#errorAlert').hide();
                event.preventDefault();

                // Reset the form
                $('#addLabourForm')[0].reset();

                // Reset validation messages
                $('.text-danger.validation-summary-errors').html('');

                 $('#labourTable').DataTable().ajax.reload();

                // Hide modal after a delay
                setTimeout(function () {
                    $('#addShift').modal('hide');
                }, 1000);

                // Hide alerts after a delay
                setTimeout(hideAlerts, 1000);
            } else {
                //$("#addLabour").modal('hide');
                var errors = response.errors;
                if (errors && errors.length > 0) {
                    var errorMessage = "<ul>";
                    errors.forEach(function (error) {
                        errorMessage += "<li>" + error + "</li>";
                    });
                    errorMessage += "</ul>";
                    $('#validationSummaryForAdd').html(errorMessage);
                }

            }
        }

        // This function is used when adding a shift is failed, it will only trigger when adding a shift is failed
        function handleFailureforAdd(xhr, status, error) {
            hideSpinner();
            $("#addLabour").modal('hide');
            // Show error alert for AJAX failure
            $('#errorMessage').text("An Error Occurred While Adding Shift");
            $('#errorAlert').show();

            // Optional: Hide success alert if it's still visible
            $('#successAlert').hide();

            setTimeout(hideAlerts, 1000);
        }
        // Function to handle success when updating shift is successful
        function handleSuccessforUpdate(response) {
            hideSpinner();
            if (response.success) {
                // Show success alert
                $('#successMessage').text(response.message);
                $('#successAlert').fadeIn();

                // Optional: Hide error alert if it's still visible
                $('#errorAlert').hide();

                // Other actions (reload data, hide modal, etc.)
                event.preventDefault();
                $('#labourTable').DataTable().ajax.reload();
                $("#updateLabour").modal('hide');
                setTimeout(hideAlerts, 2000);
            } else {
                var errors = response.errors;
                if (errors && errors.length > 0) {
                    var errorMessage = "<ul>";
                    errors.forEach(function (error) {
                        errorMessage += "<li>" + error + "</li>";
                    });
                    errorMessage += "</ul>";
                    $('#validationSummaryForUpdate').html(errorMessage);
                }
            }
        }

        // Function to handle failure when updating shift fails
        function handleFailureforUpdate() {
            hideSpinner();
            // Show error alert for AJAX failure
            $('#errorMessage').text("An Error Occurred While Updating Shift");
            $('#errorAlert').fadeIn();

            // Optional: Hide success alert if it's still visible
            $('#successAlert').hide();
            setTimeout(hideAlerts, 2000);
        }
        //Function to calculate duration based on start and end time
        function calculateDuration(startTimeFieldId, endTimeFieldId, durationFieldId) {
            var startTime = $('#' + startTimeFieldId).val();
            var endTime = $('#' + endTimeFieldId).val();

            // Convert start and end time to JavaScript Date objects
            var start = new Date("01/01/2020 " + startTime); // Assuming date doesn't matter for calculation
            var end = new Date("01/01/2020 " + endTime); // Assuming date doesn't matter for calculation

            // Check if end time is before start time (end time is of the next day)
            if (end < start) {
                // Add 24 hours to end time
                end.setDate(end.getDate() + 1);
            }

            // Calculate duration in milliseconds
            var durationMs = end - start;

            // Convert duration to hours and minutes
            var hours = Math.floor(durationMs / (1000 * 60 * 60));
            var minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));

            // Format duration
            var duration = hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0');

            // Set duration value to duration field
            $('#' + durationFieldId).val(duration);
        }

    </script>
}
