
@{
    ViewBag.Title = "EmployeePayroll";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentYear = DateTime.Now.Year;
    var years = Enumerable.Range(currentYear - 9, 10).ToList();
    var months = new List<SelectListItem>
{
     new SelectListItem { Text = "January", Value = "1" },
     new SelectListItem { Text = "February", Value = "2" },
     new SelectListItem { Text = "March", Value = "3" },
     new SelectListItem { Text = "April", Value = "4" },
     new SelectListItem { Text = "May", Value = "5" },
     new SelectListItem { Text = "June", Value = "6" },
     new SelectListItem { Text = "July", Value = "7" },
     new SelectListItem { Text = "August", Value = "8" },
     new SelectListItem { Text = "September", Value = "9" },
     new SelectListItem { Text = "October", Value = "10" },
     new SelectListItem { Text = "November", Value = "11" },
     new SelectListItem { Text = "December", Value = "12" }
 };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
</head>
<body>

    <div class="main-content">
        <div class="breadcrumb">
            <ul>
                <li><a href="/Payroll/Index">Payroll</a></li>
            </ul>
        </div>
        <div class="separator-breadcrumb border-top"></div>
    </div>

    <div class="col-md-12 mb-3">


        <div class="card text-start">

            <div class="card-header">
                <h4 class="text-25 text-muted">Payroll<i class="fas fa-sync-alt float-end text-20 mr-5" id="reloadIcon" title="Press to Reload Payroll Table"></i></h4>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-success" role="alert" id="successAlert" style="display:none">
                <strong class="text-capitalize">Success!</strong> <span id="successMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="alert alert-dismissible fade show alert-card alert-danger" role="alert" id="errorAlert" style="display:none">
                <strong class="text-capitalize">Error!</strong> <span id="errorMessage"></span>
                <button class="btn btn-close" type="button" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            <div class="card-body">
                <h3 class="text-muted">Filter By</h3>
                <div class="row">
                    <div class="col-md-3">
                        @Html.DropDownList("Year", new SelectList(years), "Select Year", new { @class = "form-control", @id = "payrollDate" })
                    </div>
                    <div class="col-md-3">
                        @Html.DropDownList("Month", months, "Select Month", new { @class = "form-control", @id = "payrollMonth" })
                    </div>
                </div>
                <div class="table-responsive mt-4">
                    <table class="table table-hover table-bordered table-striped" id="payrollTable">
                        <thead class="bg-gray-300">
                            <tr>
                                <th scope="col">Employee Name</th>
                                <th scope="col">Year</th>
                                <th scope="col">Month</th>
                                <th scope="col">Cumulative Hours</th>
                                <th scope="col">Base Salary</th>
                                <th scope="col">Bonus Paid</th>
                                <th scope="col">Cumulative Salary</th>
                                <th scope="col">Approved Salary</th>
                                <th scope="col">Salary Left</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="card-footer">
            </div>
        </div>
    </div>

</body>
</html>
@section scripts
{
    <script>
        $(document).ready(function () {
            $('#payrollDate').change(fetchPayrollRecords);

            // Bind change event to payrollMonth dropdown
            $('#payrollMonth').change(fetchPayrollRecords);
            $("#reloadIcon").tooltip({
                placement: "left", // Set the tooltip placement to left
                show: {
                    effect: "slideDown",
                    delay: 250
                }
            });
            $("#reloadIcon").click(function () {
                $(this).toggleClass('fa-spin');
                fetchPayrollRecords();
            });
            var monthNames = [
                "January", "February", "March", "April", "May", "June", "July",
                "August", "September", "October", "November", "December"
            ];

            function fetchPayrollRecords() {
                var year = $('#payrollDate').val();
                var month = $('#payrollMonth').val();
                var payrollTable = $('#payrollTable').DataTable({
                    destroy: true,
                    ajax: {
                        url: '/Payroll/GetPayrollDataByUser', // Replace with your backend route
                        data: { year: year, month: month },
                        dataSrc: '',
                    },
                    columns: [
                        
                        {
                            "data": null,
                            "render": function (data, type, row) {
                                if (data.Labour) {
                                    return data.Labour.FirstName + " " + data.Labour.LastName;
                                }
                                else if (data.ApplicationUser) {
                                    return data.ApplicationUser.FirstName + " " + data.ApplicationUser.LastName;
                                }
                                else {
                                    return "Null";
                                }
                            }
                        },

                        {
                            data: 'Year',
                            width: '35px'
                        },
                        {
                            data: 'Month',
                            render: function (data) {
                                // Convert numeric month to month name
                                return monthNames[data - 1]; // Subtract 1 because JavaScript months are zero-indexed
                            },
                            width: '45px'
                        },
                        {
                            "data": "TotalHoursWorked",
                            "render": function (data) {
                                // Format TotalHoursWorked to two decimal places
                                return parseFloat(data).toFixed(2);
                            },
                            width: '70px'

                        },
                        {
                            "data": "TotalSalary",
                            "render": function (data) {
                                // Format TotalSalary to two decimal places
                                return parseFloat(data).toFixed(2);
                            },
                            width: '50px'

                        },
                        {
                            "data": "Bonus",
                            width: '35px'

                        },
                        {
                            "data": null,
                            "render": function (data, type, row) {
                                // Parse Bonus to a float, if null, treat it as 0
                                var bonus = row.Bonus ? parseFloat(row.Bonus) : 0;

                                // Parse TotalSalary to a float
                                var totalSalary = parseFloat(row.TotalSalary);

                                // Calculate the total of Bonus and TotalSalary
                                var total = bonus + totalSalary;

                                // Format total to two decimal places
                                return total.toFixed(2);
                            },
                            "width": '50px'
                        },

                        {
                            "data": "salaryApproved",
                            "render": function (data) {
                                // Format TotalSalary to two decimal places
                                return parseFloat(data).toFixed(2);
                            },
                            width: '75px'

                        },
                        {
                            "data": null,
                            "render": function (data, type, row) {
                                // Calculate the difference between TotalSalary and salaryApproved
                                var remainingAmount = parseFloat(row.TotalSalary - row.salaryApproved).toFixed(2);

                                // Return the calculated difference
                                return remainingAmount;
                            },
                            width: '45px'

                        },
                        
                    ],
                    pagingType: 'full_numbers',
                    language: {
                        paginate: {
                            first: 'First',
                            previous: '&lsaquo;',
                            next: '&rsaquo;',
                            last: 'Last'
                        },
                        searchPlaceholder: 'Min 3 Characters'
                    },
                    autoWidth: false,
                    columnDefs: [
                        { width: '100px', targets: '_all' }
                    ],
                    drawCallback: function () {
                        // Override DataTables styles with Bootstrap styles after each draw
                        $('.dataTables_paginate .paginate_button').removeClass('paginate_button').addClass('page-item');
                        $('.dataTables_paginate .paginate_button a').removeClass('paginate_button').addClass('page-link');
                        $('.dataTables_paginate .paginate_button.current').removeClass('paginate_button').addClass('active');
                        $('.dataTables_paginate .paginate_button.disabled').removeClass('paginate_button').addClass('disabled');
                    },
                    initComplete: function () {
                        $("#reloadIcon").removeClass('fa-spin');
                    }
                });

            }

            fetchPayrollRecords();




        });

    </script>
}